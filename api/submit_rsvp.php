<?php
require_once '../config/database.php';

// Set proper encoding
mb_internal_encoding('UTF-8');
mb_http_output('UTF-8');

header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Ch·ªâ ch·∫•p nh·∫≠n POST request']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);

if (!$input) {
    $input = $_POST;
}

// Validate d·ªØ li·ªáu
$name = trim($input['name'] ?? '');
$phone = trim($input['phone'] ?? '');
$guests = intval($input['guests'] ?? 1);
$attendance = $input['attendance'] ?? 'yes';
$message = trim($input['message'] ?? '');

// Ensure UTF-8 encoding
$name = mb_convert_encoding($name, 'UTF-8', 'auto');
$phone = mb_convert_encoding($phone, 'UTF-8', 'auto');
$message = mb_convert_encoding($message, 'UTF-8', 'auto');

if (empty($name)) {
    echo json_encode(['success' => false, 'message' => 'Vui l√≤ng nh·∫≠p h·ªç t√™n']);
    exit;
}

if (strlen($name) > 255) {
    echo json_encode(['success' => false, 'message' => 'T√™n qu√° d√†i (t·ªëi ƒëa 255 k√Ω t·ª±)']);
    exit;
}

if (!in_array($attendance, ['yes', 'no'])) {
    echo json_encode(['success' => false, 'message' => 'Th√¥ng tin tham d·ª± kh√¥ng h·ª£p l·ªá']);
    exit;
}

if ($guests < 1 || $guests > 20) {
    echo json_encode(['success' => false, 'message' => 'S·ªë l∆∞·ª£ng kh√°ch kh√¥ng h·ª£p l·ªá']);
    exit;
}

// L·ªçc HTML tags v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
$name = htmlspecialchars($name, ENT_QUOTES, 'UTF-8');
$phone = htmlspecialchars($phone, ENT_QUOTES, 'UTF-8');
$message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');

try {
    // Ki·ªÉm tra spam (gi·ªõi h·∫°n 2 RSVP/IP trong 1 ng√†y)
    $ip = $_SERVER['REMOTE_ADDR'];
    $checkSpam = $pdo->prepare("SELECT COUNT(*) FROM rsvps WHERE ip_address = ? AND created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)");
    $checkSpam->execute([$ip]);
    
    if ($checkSpam->fetchColumn() >= 2) {
        echo json_encode(['success' => false, 'message' => 'B·∫°n ƒë√£ x√°c nh·∫≠n tham d·ª±. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp n·∫øu c·∫ßn thay ƒë·ªïi.']);
        exit;
    }
    
    // L∆∞u v√†o database
    $stmt = $pdo->prepare("INSERT INTO rsvps (name, phone, guests, attendance, message, ip_address) VALUES (?, ?, ?, ?, ?, ?)");
    $result = $stmt->execute([$name, $phone, $guests, $attendance, $message, $ip]);
    
    if ($result) {
        $attendanceText = $attendance === 'yes' ? 'tham d·ª±' : 'kh√¥ng th·ªÉ tham d·ª±';
        echo json_encode([
            'success' => true, 
            'message' => "C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n {$attendanceText}! üíï",
            'id' => $pdo->lastInsertId()
        ]);
    } else {
        echo json_encode(['success' => false, 'message' => 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i']);
    }
    
} catch(Exception $e) {
    error_log("RSVP submission error: " . $e->getMessage());
    echo json_encode(['success' => false, 'message' => 'C√≥ l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau']);
}
?>
